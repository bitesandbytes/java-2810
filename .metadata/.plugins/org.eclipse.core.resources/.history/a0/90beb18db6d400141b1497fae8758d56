import java.util.*;

public class AVLTree<T extends Comparable<T>>
{
	Node<T> treeRoot;
	Queue<Node<T>> queue;
	Stack<Node<T>> newNodePath;

	AVLTree()
	{
		treeRoot = null;
		queue = new LinkedList<Node<T>>();
		newNodePath = new Stack<Node<T>>();
	}

	public void insert(T data)
	{
		Node<T> newNode = new Node<T>(data);
		Node<T> unbalancedNode;
		if (treeRoot == null)
		{
			treeRoot = newNode;
			return;
		}
		BSTInsert(treeRoot, newNode);
		updateBalanceFactors(newNode);
		unbalancedNode = findUnbalancedNode(newNode);
		if (unbalancedNode == null)
			return;
		balanceInsertion(unbalancedNode);
	}

	public Node<T> find(T data)
	{
		return recursiveFind(treeRoot, data);
	}

	public void remove(T removeData)
	{
		treeRoot = recursiveRemove(treeRoot,removeData);
	}

	public Node<T> recursiveRemove(Node<T> root, T data)
	{
		if(root == null)
		{
			System.out.println("Element not found.");
			return null;
		}
		if(root.data == data)
		{
			Node<T> minNode = findMin(root.right);
			if(minNode == null)
				root = root.right;
			else
			{
				root.data = minNode.data;
				root.right = recursiveRemove(root.right,root.data);
			}
			return root;
		}
		else if(root.data.compareTo(data) < 0)
			root.right = recursiveRemove(root.right,data);
		else
			root.left = recursiveRemove(root.left,data);
		return root;
	}

	private Node<T> recursiveFind(Node<T> root, T data)
	{
		if (root == null)
			return null;
		int result = root.data.compareTo(data);
		if (result == 0)
			return root;
		else if (result < 0)
			return recursiveFind(root.right, data);
		else
			return recursiveFind(root.left, data);
	}

	private void balanceInsertion(Node<T> unbalancedNode)
	{
		// TODO:: Finish this.
	}

	private void updateBalanceFactors(Node<T> root)
	{
		if (root == null)
			return;
		root.height = max(height(root.left), height(root.right)) + 1;
		root.balanceFactor = root.left.height - root.right.height;
		updateBalanceFactors(root.parent);
		return;
	}

	private int height(Node<T> root)
	{
		if (root == null)
			return 0;
		else
			return root.height;
	}

	private int max(int a, int b)
	{
		if (a < b)
			return b;
		else
			return a;
	}

	private void BSTInsert(Node<T> root, Node<T> insertNode)
	{
		if (root.compareTo(insertNode) < 0)
		{
			if (root.left == null)
			{
				root.left = insertNode;
				insertNode.parent = root;
				return;
			}
			else
			{
				BSTInsert(root.left, insertNode);
				return;
			}
		}
		else
		{
			if (root.right == null)
			{
				root.right = insertNode;
				insertNode.parent = root;
				return;
			}
			else
			{
				BSTInsert(root.right, insertNode);
				return;
			}
		}
	}

	// Finds an unbalanced ancestor.
	private Node<T> findUnbalancedNode(Node<T> root)
	{
		if (root == null)
			return null;
		if (root.balanceFactor < -1 || root.balanceFactor > 1)
			return root;
		else
			return findUnbalancedNode(root.parent);
	}

	private void leftRotate(Node<T> oldRoot)
	{
		Node<T> newRoot = oldRoot.right, alpha;
		if (newRoot == null)
			return;

		alpha = newRoot.left;
		newRoot.parent = oldRoot.parent;
		oldRoot.parent = newRoot;
		newRoot.left = oldRoot;

		if (newRoot.parent.left == oldRoot)
			newRoot.parent.left = newRoot;
		else
			newRoot.parent.right = newRoot;

		oldRoot.right = alpha;
		alpha.parent = oldRoot;

		return;
	}

	private void rightRotate(Node<T> oldRoot)
	{
		Node<T> newRoot = oldRoot.left, alpha;
		if (newRoot == null)
			return;

		alpha = newRoot.right;
		newRoot.parent = oldRoot.parent;
		oldRoot.parent = newRoot;
		newRoot.right = oldRoot;

		if (newRoot.parent.left == oldRoot)
			newRoot.parent.left = newRoot;
		else
			newRoot.parent.right = newRoot;

		oldRoot.left = alpha;
		alpha.parent = oldRoot;

		return;
	}

	private Node<T> findMin(Node<T> root)
	{
		if (root.left == null)
			return root;
		else
			return findMin(root.left);
	}
}
