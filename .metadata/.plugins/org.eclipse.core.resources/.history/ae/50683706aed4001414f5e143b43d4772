/*
 * Author : Sauce (CS13B056) CS2810 - Advanced Programming Lab AVL Tree Class.
 * Bugs : Lots, fix Deletion, rotation, insertion.
 */

import java.util.*;

public class AVLTree<T extends Comparable<T>>
{
	private Node<T> treeRoot;
	private int treeSize;
	private Stack<Node<T>> newNodePath;
	private Queue<Node<T>> BFSQueue;

	AVLTree()
	{
		treeRoot = null;
		treeSize = 0;
		newNodePath = new Stack<Node<T>>();
		BFSQueue = new LinkedList<Node<T>>();
	}

	// Returns 'true' if the AVL Tree is empty.
	public boolean isEmpty()
	{
		return (treeSize == 0);
	}

	// Inserts 'newData' into the AVL Tree.
	public void insert(T newData)
	{
		Node<T> newNode = new Node<T>(newData);
		treeSize++;
		newNodePath.clear();
		// If the tree is empty.
		if (treeRoot == null)
		{
			treeRoot = newNode;
			newNodePath.push(newNode);
			return;
		}
		recursiveInsert(treeRoot, newNode);
		Node<T> unbalancedNode = foundUnbalancedNode(newNode);
		// Check if any node is unbalanced.
		if (unbalancedNode != null)
			fixBalanceInsertion(unbalancedNode);
		printBFS();
		return;
	}

	// Finds the node that is unbalanced.
	private Node<T> foundUnbalancedNode(Node<T> root)
	{
		// Recursion termination.
		if (root == null)
			return null;

		if (root.balanceFactor > 1 || root.balanceFactor < -1)
			return root;

		// Bubble up and find the unbalanced ancestor.
		return foundUnbalancedNode(root.parent);
	}

	// Balances the subtree at 'unbalancedNode' by performing rotations.
	private void fixBalanceInsertion(Node<T> unbalancedNode)
	{
		System.out.println("Balancing at "+unbalancedNode.data);
		// Find the unbalanced path.
		Node<T> child = null, parent = null, ancestor = null;
		while (!newNodePath.isEmpty())
		{
			child = parent;
			parent = ancestor;
			ancestor = newNodePath.pop();
			if(ancestor == unbalancedNode)
				break;
		}
		if(ancestor == null || child == null || parent == null)
			return;
		boolean isLeftChildOfAncestor = false;
		boolean isLeftChildOfParent = false;
		
		if (ancestor.left != null)
			isLeftChildOfAncestor = (ancestor.left.compareTo(parent) == 0);
		if (parent.left != null)
			isLeftChildOfParent = (parent.left.compareTo(child) == 0);

		// Case 1 : Left, Left
		if (isLeftChildOfAncestor && isLeftChildOfParent)
			rightRotate(ancestor);

		// Case 2 : Left, Right
		else if (isLeftChildOfAncestor && !isLeftChildOfParent)
		{
			leftRotate(parent);
			rightRotate(ancestor);
		}
		else if (!isLeftChildOfAncestor && isLeftChildOfParent)
		{
			rightRotate(parent);
			leftRotate(ancestor);
		}
		else
			leftRotate(ancestor);
		
		unbalancedNode = foundUnbalancedNode(ancestor);
		newNodePath.push(parent);
		if (unbalancedNode != null)
			fixBalanceInsertion(unbalancedNode);
		return;
	}

	// Function to do a standard BST insert.
	private boolean recursiveInsert(Node<T> root, Node<T> newNode)
	{
		// If the newNode goes in the left subtree.
		if (root.compareTo(newNode) > 0)
		{
			newNodePath.push(root);
			if (root.left == null)
			{
				root.left = newNode;
				newNode.parent = root;
				newNodePath.push(newNode);
				if(root.right == null)
					return true;
				else
					return false;
			}
			else
				if(recursiveInsert(root.left, newNode))
				{
					root.balanceFactor--;
					return true;
				}
				else
					return false;
		}

		// If the newNode goes in the right subtree.
		else
		{
			newNodePath.push(root);
			if (root.right == null)
			{
				root.right = newNode;
				newNode.parent = root;
				newNodePath.push(newNode);
				if(root.left == null)
					return true;
				else
					return false;
			}
			else
				if(recursiveInsert(root.right, newNode))
				{
					root.balanceFactor++;
					return true;
				}
				else
					return false;
		}
	}

	// Finds the element "data" in AVL Tree.
	public Node<T> find(T data)
	{
		if (treeRoot == null)
			return null;
		else
			return recursiveFind(treeRoot, data);
	}

	// Implements a standard recursive BST find.
	private Node<T> recursiveFind(Node<T> root, T data)
	{
		if (root == null)
			return null;
		int result = root.data.compareTo(data);

		if (result == 0)
			return root;

		else if (result < 0)
			return recursiveFind(root.left, data);

		else
			return recursiveFind(root.right, data);
	}

	// Left rotates about the node "oldRoot".
	private void leftRotate(Node<T> oldRoot)
	{
		System.out.println("Left rotate at "+oldRoot.data);
		Node<T> newRoot = oldRoot.right;

		if (newRoot == null)
			return;

		Node<T> alphaSubTree = newRoot.left;
		Node<T> rootParent = oldRoot.parent;

		newRoot.parent = rootParent;

		newRoot.left = oldRoot;
		oldRoot.parent = newRoot;

		oldRoot.right = alphaSubTree;

		if (alphaSubTree != null)
			alphaSubTree.parent = oldRoot;

		// If you're rotating about the root of the tree.
		if (rootParent == null)
			treeRoot = newRoot;

		// If the old Root was the left child of it's parent.
		else if (rootParent.left == oldRoot)
			rootParent.left = newRoot;

		// If the old Root was the right child of it's parent.
		else
			rootParent.right = newRoot;

		return;
	}

	// Right rotates about the node "oldRoot".
	private void rightRotate(Node<T> oldRoot)
	{
		System.out.println("Right rotate at "+oldRoot.data);
		Node<T> newRoot = oldRoot.left;

		if (newRoot == null)
			return;

		Node<T> alphaSubTree = newRoot.right;
		Node<T> rootParent = oldRoot.parent;

		newRoot.parent = rootParent;

		newRoot.right = oldRoot;
		oldRoot.parent = newRoot;

		oldRoot.left = alphaSubTree;

		if (alphaSubTree != null)
			alphaSubTree.parent = oldRoot;

		// If you're rotating about the root of the tree.
		if (rootParent == null)
			treeRoot = newRoot;

		// If the old Root was the left child of it's parent.
		else if (rootParent.left == oldRoot)
			rootParent.left = newRoot;

		// If the old Root was the right child of it's parent.
		else
			rootParent.right = newRoot;

		return;
	}

	// Prints the AVL Tree in sorted manner using inorder traversal.
	public void print()
	{
		printInorder(treeRoot);
		System.out.print("\n");
		return;
	}

	// Does a standard BST recursive Inorder traversal.
	private void printInorder(Node<T> root)
	{
		if (root == null)
			return;
		printInorder(root.left);
		System.out.print(" " + root.data);
		printInorder(root.right);
		return;
	}

	// Does a BFS traversal of the AVL Tree.
	private void printBFS()
	{
		System.out.println(" ");
		BFSQueue.add(treeRoot);
		Node<T> curNode = null;
		while (!BFSQueue.isEmpty())
		{
			curNode = BFSQueue.remove();
			System.out.println(curNode.data + " "+"BF = "+curNode.balanceFactor);
			if (curNode.left != null)
				BFSQueue.add(curNode.left);
			if (curNode.right != null)
				BFSQueue.add(curNode.right);
		}
		//System.out.println(" ");
		return;
	}

	// Removes 'data' from the the AVL Tree.
	public void remove(T removeData)
	{
		Node<T> removeNode = this.find(removeData);
		if (removeNode == null)
			return;
		else
		{
			Node<T> unbalanced = recursiveRemove(removeNode, removeData);
			unbalanced = foundUnbalancedNode(unbalanced);
			fixBalanceDeletion(unbalanced);
			return;
		}
	}

	// Fixes balance after deletion.
	private void fixBalanceDeletion(Node<T> unbalancedNode)
	{
		Node<T> ancestor = unbalancedNode;
		Node<T> parent;
		boolean leftA, leftB;

		if (Math.abs(unbalancedNode.left.balanceFactor) > Math
				.abs(unbalancedNode.right.balanceFactor))
		{
			parent = unbalancedNode.left;
			leftA = true;
		}
		else
		{
			parent = unbalancedNode.right;
			leftA = false;
		}

		if (Math.abs(parent.left.balanceFactor) > Math
				.abs(parent.right.balanceFactor))
			leftB = true;
		else
			leftB = false;

		if (leftA && leftB)
			rightRotate(ancestor);

		else if (leftA & !leftB)
		{
			leftRotate(parent);
			rightRotate(ancestor);
		}

		else if (!leftA && leftB)
		{
			rightRotate(parent);
			leftRotate(ancestor);
		}

		else
			leftRotate(ancestor);

		// Initiate recursion.
		Node<T> newUnbalancedNode = foundUnbalancedNode(ancestor);
		if (newUnbalancedNode != null)
			fixBalanceDeletion(newUnbalancedNode);
		return;
	}

	// Does a standard BST remove function. Returns the parent of the node
	// removed physically.
	private Node<T> recursiveRemove(Node<T> curNode, T removeData)
	{
		// Check if it's in the left subtree.
		if (curNode.data.compareTo(removeData) < 0)
		{
			curNode.balanceFactor++;
			return recursiveRemove(curNode.right, removeData);
		}

		// Check if it's in the right subtree.
		else if (curNode.data.compareTo(removeData) > 0)
		{
			curNode.balanceFactor--;
			return recursiveRemove(curNode.left, removeData);
		}
		// If curNode is to be removed.
		if (curNode.parent == null)
		{
			// Case 1 : No right subtree.
			if (curNode.right == null)
			{
				treeRoot = curNode.left;
				curNode.left.parent = null;
				treeSize--;
				return curNode.parent;
			}

			// Case 2 : Find min value in right subtree.
			Node<T> min = findMinRight(curNode);
			curNode.data = min.data;
			curNode.balanceFactor--;
			return recursiveRemove(curNode.right, min.data);
		}

		Node<T> parent = curNode.parent;

		// Case 1 : No right subtree.
		if (curNode.left == null)
		{
			if (parent.left == curNode)
			{
				parent.left = curNode.right;
				parent.balanceFactor++;
			}
			else
			{
				parent.right = curNode.right;
				parent.balanceFactor--;
			}
			curNode.right.parent = parent;
		}

		// Case 2 : Find min value in right subtree.
		Node<T> min = findMinRight(curNode);
		curNode.data = min.data;
		curNode.balanceFactor--;
		return recursiveRemove(curNode.right, min.data);
	}

	// Finds min value in right subtree.
	private Node<T> findMinRight(Node<T> root)
	{
		if (root == null)
			return null;
		if (root.left != null)
			return findMinRight(root.left);
		else
			return root.left;
	}
}
