import java.util.*;

public class newAVL<T extends Comparable<T>>
{
	private Node<T> treeRoot;
	private int treeSize;
	private Stack<Node<T>> newNodePath;
	private Queue<Node<T>> BFSQueue;

	newAVL()
	{
		treeRoot = null;
		treeSize = 0;
		newNodePath = new Stack<Node<T>>();
		BFSQueue = new LinkedList<Node<T>>();
	}

	public void insert(T data)
	{
		Node<T> newNode = new Node<T>(data);
		if (treeRoot == null)
			treeRoot = newNode;
		else
			stdInsert(treeRoot, newNode);
	}
	
	private void stdInsert(Node<T> root, Node<T> newNode)
	{
		if(root.compareTo(newNode) < 0)
		{
			if(root.left)
		}
	}
	
	// Prints the AVL Tree in sorted manner using inorder traversal.
	public void print()
	{
		printInorder(treeRoot);
		System.out.print("\n");
		return;
	}

	// Does a standard BST recursive Inorder traversal.
	private void printInorder(Node<T> root)
	{
		if (root == null)
			return;
		printInorder(root.left);
		System.out.print(" " + root.data);
		printInorder(root.right);
		return;
	}

	// Does a BFS traversal of the AVL Tree.
	private void printBFS()
	{
		System.out.println(" ");
		BFSQueue.add(treeRoot);
		Node<T> curNode = null;
		while (!BFSQueue.isEmpty())
		{
			curNode = BFSQueue.remove();
			System.out.println(curNode.data + " " + "BF = "
					+ curNode.balanceFactor);
			if (curNode.left != null)
				BFSQueue.add(curNode.left);
			if (curNode.right != null)
				BFSQueue.add(curNode.right);
		}
		// System.out.println(" ");
		return;
	}

}
