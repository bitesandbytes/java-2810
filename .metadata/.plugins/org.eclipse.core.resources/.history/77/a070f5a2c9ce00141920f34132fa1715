package minVertexCover;
import java.util.*;
public class Runner
{
	public static void main(String[] args)
	{
		Graph graph;
		int n, m;
		Scanner in = new Scanner(System.in);
		n = in.nextInt();
		graph = new Graph(n);
		int vertexA, vertexB;
		
		//Vertex reference to hold the vertex to start recursion at.s
		Vertex startVertex = graph.vertices[0];
		while(in.hasNext())
		{
			vertexA = in.nextInt();
			vertexB = in.nextInt();
			graph.vertices[vertexA].adjacentVertices.add(graph.vertices[vertexB]);
			graph.vertices[vertexA].degree++;
			graph.vertices[vertexB].adjacentVertices.add(graph.vertices[vertexA]);
			graph.vertices[vertexB].degree++;
			
			//Update the vertex with maximum degree.
			if(startVertex.compareTo(graph.vertices[vertexA]) < 0)
				startVertex = graph.vertices[vertexA];
			if(startVertex.compareTo(graph.vertices[vertexB]) < 0)
				startVertex = graph.vertices[vertexB];
		}
		int minVertexCoverSize =  probeCurrentVertex(startVertex, true);
		
	}

	private static int probeCurrentVertex(Vertex curVertex, boolean isIncluded)
	{
		int sum = 1;
		for (Vertex v : curVertex.adjacentVertices)
			sum+=probeCurrentVertex(v,false);
		
		//If curVertex must picked, then all it's children must not be picked.
		if(isIncluded)
			return 1+sum;
		
		//If curVertex is not picked, then all it's children must be check
		int otherSum = 0;
		for (Vertex v : curVertex.adjacentVertices)
			otherSum += probeCurrentVertex(v,true);
		return min(sum,otherSum);
	}

	private static int min(int a, int b)
	{
		if(a < b)
			return a;
		else
			return b;
	}
}
